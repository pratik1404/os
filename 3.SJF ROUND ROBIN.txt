//SJF (Preemptive) Code:

#include <stdio.h>

struct Process {
    int id;           // Process ID
    int AT;          // Arrival Time
    int BT;          // Burst Time
    int WT;          // Waiting Time
    int TA;          // Turnaround Time
    int BTT;         // Original Burst Time
    int r;           // Running flag
};

void main() {
    struct Process arr[100];
    int totalBT = 0;
    int n;

    printf("Enter the count of Processes: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        printf("Enter for %d:\n", i);
        arr[i].id = i;
        arr[i].r = 0;
        arr[i].TA = 0;
        arr[i].WT = 0;

        printf("AT: ");
        scanf("%d", &arr[i].AT);
        printf("BT: ");
        scanf("%d", &arr[i].BT);
        arr[i].BTT = arr[i].BT;
        totalBT += arr[i].BT;
    }

    // Sort by Arrival Time, then by Burst Time
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j].AT > arr[j + 1].AT || 
               (arr[j].AT == arr[j + 1].AT && arr[j].BT > arr[j + 1].BT)) {
                struct Process temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }

    printf("\nGantt Chart:\n\n");
    int CT = 0, i = 0, sin = 0;
    float avgTA = 0, pre = -1;

    // Initial process handling
    if (arr[0].AT != 0) {
        CT = arr[0].AT;
        printf("0--///--");
    }

    while (totalBT > 0) {
        int flag = 0;

        // Check for new arrivals
        if (i < n && CT == arr[i].AT) {
            arr[i].r = 1;
            if (arr[sin].BT < 1 || arr[sin].BT > arr[i].BT) {
                sin = i;
            }
            i++;
        }

        // Execute the process with the shortest remaining time
        if (arr[sin].BT > 0) {
            arr[sin].BT--;
            totalBT--;
            flag = 1;
            if (pre != sin) {
                pre = sin;
                printf("%d--P%d--", CT, arr[sin].id);
            }
            for (int p = 0; p < n; p++) {
                if (arr[p].r == 1) {
                    arr[p].TA++;
                    avgTA++;
                }
            }
        }

        // Check if process is finished
        if (arr[sin].BT < 1) {
            arr[sin].r = 0;
            for (int k = 0; k < n; k++) {
                if (arr[k].r == 1) {
                    sin = k;
                    break;
                }
            }
        }
        CT++;
    }
    printf("%d\n", CT);

    // Calculate waiting times and turnaround times
    float avgWt = 0;
    for (int p = 0; p < n; p++) {
        arr[p].WT = arr[p].TA - arr[p].BTT;
        avgWt += arr[p].WT;
    }

    // Display results
    printf("\nPid AT BT TA WT\n");
    for (int i = 0; i < n; i++) {
        printf("P%d %d %d %d %d\n", arr[i].id, arr[i].AT, 
               arr[i].BTT, arr[i].TA, arr[i].WT);
    }

    printf("\nAverage Turnaround Time: %.2f\n", avgTA / (float)(n));
    printf("Average Waiting Time: %.2f\n", avgWt / (float)(n));
}



/*Round Robin Code:





#include <stdio.h>

void main() {
    int i, NOP, sum = 0, count = 0, y, quant, wt = 0, tat = 0, at[10], bt[10], temp[10];
    float avg_wt, avg_tat;

    printf("Total number of processes in the system: ");
    scanf("%d", &NOP);
    y = NOP; // Assign the number of processes to variable y

    // Input Arrival Time and Burst Time
    for (i = 0; i < NOP; i++) {
        printf("\nEnter the Arrival and Burst time of Process[%d]\n", i + 1);
        printf("Arrival time: "); // Accept arrival time
        scanf("%d", &at[i]);
        printf("Burst time: ");   // Accept the Burst time
        scanf("%d", &bt[i]);
        temp[i] = bt[i]; // Store the burst time in a temporary array
    }

    // Accept the Time Quantum
    printf("Enter the Time Quantum for the process: ");
    scanf("%d", &quant);

    // Display the process No, burst time, Turnaround Time, and Waiting Time
    printf("\nProcess No\tBurst Time\tTAT\t\tWaiting Time\n");
    for (sum = 0, i = 0; y != 0; ) {
        if (temp[i] <= quant && temp[i] > 0) { // Define conditions
            sum += temp[i];
            temp[i] = 0;
            count = 1;
        } else if (temp[i] > 0) {
            temp[i] -= quant;
            sum += quant;
        }
        if (temp[i] == 0 && count == 1) {
            y--; // Decrement the process number
            printf("Process No[%d]\t%d\t\t\t%d\t\t%d\n", i + 1, bt[i], sum - at[i], sum - at[i] - bt[i]);
            wt += sum - at[i] - bt[i];
            tat += sum - at[i];
            count = 0;
        }
        // Loop through processes
        if (i == NOP - 1) {
            i = 0;
        } else if (at[i + 1] <= sum) {
            i++;
        } else {
            i = 0;
        }
    }

    // Calculate average waiting time and Turnaround time
    avg_wt = (float)wt / NOP;
    avg_tat = (float)tat / NOP;
    printf("\nAverage Turnaround Time: %.2f", avg_tat);
    printf("\nAverage Waiting Time: %.2f", avg_wt);
}
*/

/*Compile and Run:

Compile the programs using:
bash
Copy code
gcc sjf.c -o sjf
gcc rr.c -o rr
Run each program:
bash
Copy code
./sjf
./rr*/
