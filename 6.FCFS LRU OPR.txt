// -----------------------------------------------------------FCFS--------------------------------//
#include <stdio.h>
#include <stdbool.h>

#define MAX_FRAMES 4
#define PAGE_REQUESTS 20

void fifo(int pages[], int n) {
    int frame[MAX_FRAMES];
    int queue[MAX_FRAMES];
    int page_faults = 0;
    int front = 0, rear = -1;
    int page_hits=0;

    for (int i = 0; i < MAX_FRAMES; i++) {
        frame[i] = -1;
    }

    for (int i = 0; i < n; i++) {
        int page = pages[i];
        bool page_found = false;

        for (int j = 0; j < MAX_FRAMES; j++) {
            if (frame[j] == page) {
                page_found = true;
                page_hits++;
                break;
            }
        }

        if (page_found) {
            printf("Page %d: hit\t", page);
        } else {
            printf("Page %d: fault\t", page);
            page_faults++;

            if (rear < MAX_FRAMES - 1) {
                rear++;
                frame[rear] = page;
                queue[rear] = page;
            } else {
                frame[front] = page;
                front = (front + 1) % MAX_FRAMES;  
            }
        }

        printf("\tCurrent Page Frame: ");
        for (int j = 0; j < MAX_FRAMES; j++) {
            if (frame[j] != -1) {
                printf("%d ", frame[j]);
            }
        }
        printf("\n");
    }
    printf("************************************************\n");
    printf("Total Page Faults: %d\n", page_faults);
    printf("Total Page Hits: %d\n", page_hits); 
}

int main() {
    int pages[PAGE_REQUESTS] = {1,2,3,4,2,1,5,6,2,1,2,3,7,6,3,2,1,2,3,6};
    int n = sizeof(pages) / sizeof(pages[0]);

    fifo(pages, n);

    return 0;
}*/



------------------LRU -----------------------------------------------------



#include <stdio.h>
#include <stdbool.h>

#define MAX_FRAMES 4
#define PAGE_REQUESTS 20

void lru(int pages[], int n) {
    int frame[MAX_FRAMES];
    int page_faults = 0;
    int page_hits = 0;

    // Initialize frame
    for (int i = 0; i < MAX_FRAMES; i++) {
        frame[i] = -1;
    }

    // Process each page request
    for (int i = 0; i < n; i++) {
        int page = pages[i];
        bool page_found = false;

        // Check for page hit
        for (int j = 0; j < MAX_FRAMES; j++) {
            if (frame[j] == page) {
                page_found = true;
                page_hits++;
                break;
            }
        }

        if (page_found) {
            printf("Page %d: hit\t", page);
        } else {
            printf("Page %d: fault\t", page);
            page_faults++;

            // Find the LRU page to replace
            int lru_index = 0, lru_counter = -1;
            for (int j = 0; j < MAX_FRAMES; j++) {
                int counter = 0;
                for (int k = 0; k < i; k++) {
                    if (frame[j] == pages[k]) {
                        counter = k; // Get the last time this page was used
                        break;
                    }
                }
                // If not found in future requests
                if (counter < lru_counter || lru_counter == -1) {
                    lru_counter = counter;
                    lru_index = j;
                }
            }

            // Replace the LRU page
            frame[lru_index] = page;
        }

        // Print current frame status
        printf("\tCurrent Page Frame: ");
        for (int j = 0; j < MAX_FRAMES; j++) {
            if (frame[j] != -1) {
                printf("%d ", frame[j]);
            }
        }
        printf("\n");
    }
    printf("************************************************\n");
    printf("Total Page Faults: %d\n", page_faults);
    printf("Total Page Hits: %d\n", page_hits);
}

int main() {
    int pages[PAGE_REQUESTS] = {1, 2, 3, 4, 2, 1, 5, 6, 2, 1, 2, 3, 7, 6, 3, 2, 1, 2, 3, 6};
    int n = sizeof(pages) / sizeof(pages[0]);

    lru(pages, n);

    return 0;
}



//---------------------------------------------------OPR--------------------------------------//



#include <stdio.h>
#include <stdbool.h>

#define MAX_FRAMES 4
#define PAGE_REQUESTS 20

void optimal(int pages[], int n) {
    int frame[MAX_FRAMES];
    int page_faults = 0;
    int page_hits = 0;

    // Initialize frame
    for (int i = 0; i < MAX_FRAMES; i++) {
        frame[i] = -1;
    }

    // Process each page request
    for (int i = 0; i < n; i++) {
        int page = pages[i];
        bool page_found = false;

        // Check for page hit
        for (int j = 0; j < MAX_FRAMES; j++) {
            if (frame[j] == page) {
                page_found = true;
                page_hits++;
                break;
            }
        }

        if (page_found) {
            printf("Page %d: hit\t", page);
        } else {
            printf("Page %d: fault\t", page);
            page_faults++;

            // Find the page to replace using the optimal algorithm
            int replace_index = -1, farthest = -1;
            for (int j = 0; j < MAX_FRAMES; j++) {
                int k;
                for (k = i + 1; k < n; k++) {
                    if (frame[j] == pages[k]) {
                        if (k > farthest) {
                            farthest = k;
                            replace_index = j;
                        }
                        break;
                    }
                }
                // If page is not found in future references, select it for replacement
                if (k == n) {
                    replace_index = j;
                    break;
                }
            }

            // Replace the page
            frame[replace_index] = page;
        }

        // Print current frame status
        printf("\tCurrent Page Frame: ");
        for (int j = 0; j < MAX_FRAMES; j++) {
            if (frame[j] != -1) {
                printf("%d ", frame[j]);
            }
        }
        printf("\n");
    }
    printf("************************************************\n");
    printf("Total Page Faults: %d\n", page_faults);
    printf("Total Page Hits: %d\n", page_hits);
}

int main() {
    int pages[PAGE_REQUESTS] = {1, 2, 3, 4, 2, 1, 5, 6, 2, 1, 2, 3, 7, 6, 3, 2, 1, 2, 3, 6};
    int n = sizeof(pages) / sizeof(pages[0]);

    optimal(pages, n);

    return 0;
}     
