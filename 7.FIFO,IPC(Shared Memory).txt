-------------------------------ASSI7-------------PART-A--------------------


#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>
#include <sys/wait.h>

int main() {
    int fd1[2], fd2[2]; // Two pipes
    char string[100];
    char readbuffer[100];
    FILE *fp;

    pipe(fd1); // Create first pipe
    pipe(fd2); // Create second pipe
    pid_t id;

    if ((id = fork()) == -1) { 
        perror("fork"); 
        exit(1); 
    } else if (id == 0) { // Child process
        close(fd1[1]); // Close the write end of the first pipe
        read(fd1[0], readbuffer, sizeof(readbuffer)); // Read from the pipe
        printf("IN CHILD\n");

        // Count words and characters
        int wordcnt = 0, charcnt = 0;
        int i = 0;
        while (readbuffer[i] != '\0') {
            if (readbuffer[i] == ' ') {
                wordcnt++;
            } else {
                charcnt++;
            }
            i++;
        }
        
        // Write counts to a file
        fp = fopen("myfile.txt", "w");
        fprintf(fp, "char count %d\nword count %d\n", charcnt, wordcnt + 1);
        fclose(fp);
        printf("Count is added to file myfile.txt\n");

        // Read from the file and send content to parent via the second pipe
        fp = fopen("myfile.txt", "r");
        char ch;
        while (fscanf(fp, "%c", &ch) != EOF) {
            write(fd2[1], &ch, sizeof(ch));
        }
        printf("Sending content from child to parent by PIPE 2\n");
        fclose(fp);
        close(fd2[1]);
        exit(0);
    } else { // Parent process
        close(fd1[0]); // Close the read end of the first pipe
        printf("IN PARENT\n");
        printf("Enter the Sentence: ");
        scanf("%[^\n]s", string); // Read entire line

        write(fd1[1], string, strlen(string) + 1); // Send to child
        wait(NULL); // Wait for child to finish

        // Read from the second pipe
        close(fd1[1]);
        close(fd2[1]);
        read(fd2[0], readbuffer, sizeof(readbuffer));
        printf("Received in Parent from child: \n%s", readbuffer);
        close(fd2[0]);
    }
    return 0;
}




------------------------------ASSI7---------------------PART-B--------------------------IPC--------------SHARED MEMORY-------------




#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <unistd.h>

#define SHM_SIZE 1024 // Size of shared memory
#define SERVER_MESSAGE "Hello from the server!"

void server() {
    int shmid;
    key_t key = 1234; // Unique key for shared memory
    char *str;

    // Create shared memory segment
    shmid = shmget(key, SHM_SIZE, 0666 | IPC_CREAT);
    if (shmid == -1) {
        perror("shmget failed");
        exit(1);
    }

    str = (char *)shmat(shmid, NULL, 0); // Attach to the shared memory
    if (str == (char *)(-1)) {
        perror("shmat failed");
        exit(1);
    }

    // Write message to shared memory
    strncpy(str, SERVER_MESSAGE, SHM_SIZE);
    printf("Server: Writing to shared memory: %s\n", str);

    // Detach from shared memory
    shmdt(str);
}

void client() {
    int shmid;
    key_t key = 1234; // Unique key for shared memory
    char *str;

    // Access shared memory segment
    shmid = shmget(key, SHM_SIZE, 0666);
    if (shmid == -1) {
        perror("shmget failed");
        exit(1);
    }

    str = (char *)shmat(shmid, NULL, 0); // Attach to the shared memory
    if (str == (char *)(-1)) {
        perror("shmat failed");
        exit(1);
    }

    // Read the message from shared memory
    printf("Client: Reading from shared memory: %s\n", str);

    // Detach from shared memory
    shmdt(str);

    // Optionally, remove the shared memory segment
    shmctl(shmid, IPC_RMID, NULL);
}

int main() {
    pid_t pid;

    // Fork a process for the server
    pid = fork();
    if (pid < 0) {
        perror("fork failed");
        exit(1);
    }

    if (pid == 0) {
        // Child process - Server
        server();
    } else {
        // Parent process - Client
        sleep(1); // Ensure server runs first
        client();
    }

    return 0;
}


